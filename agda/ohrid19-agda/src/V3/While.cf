-- WHILE language (C compatible syntax)

-- A BNFC file consists of comments, pragmas, and labelled Backus-Naur Form
-- (LBNF) rules
--
--   RuleName. NonTerminal ::= SententialForm ;
--
-- where RuleName and NonTerminal stand for identifiers
-- and SententialForm for a space-separated sequence
-- of terminals and non-terminals.

-- The first NonTerminal defines the language generated by the grammar.

Prg.    Program ::= "int" "main" "(" ")" "{" [Decl] [Stm] "printInt" Exp4 ";" "}";

DInit.  Decl ::= Type Ident "=" Exp ";";

terminator Decl "";

SAss.   Stm ::= Ident "=" Exp ";";
SWhile. Stm ::= "while" Exp4 "{" [Stm] "}";

terminator Stm "";

-- The terminator pragma adds the list category and its two rules:
--
-- [].  [Stm] ::=           ;
-- (:). [Stm] ::= Stm [Stm] ;

EId.    Exp4 ::= Ident;
EInt.   Exp4 ::= Integer;
EBool.  Exp4 ::= Boolean;

EPlus.  Exp3 ::= Exp3 "+" Exp4;  -- left-associative
EGt.    Exp2 ::= Exp3 ">" Exp3;  -- non-associative
EAnd.   Exp1 ::= Exp1 "&&" Exp2;  -- left-associative
ECond.  Exp  ::= Exp1 "?" Exp1 ":" Exp1;  -- non-associative

coercions Exp 5;

-- Added by the coercions pragma:
--
-- _.   Exp5 ::= "(" Exp ")";
-- _.   Exp4 ::= Exp5       ;
-- _.   Exp3 ::= Exp4       ;
-- _.   Exp2 ::= Exp3       ;
-- _.   Exp1 ::= Exp2       ;
-- _.   Exp  ::= Exp1       ;

BTrue.  Boolean ::= "true" ;
BFalse. Boolean ::= "false";

TBool.  Type ::= "bool";
TInt.   Type ::= "int" ;

-- Pragmas for the lexer:

comment "#"      ;  -- line comment starting with #
comment "//"     ;  -- line comment starting with //
comment "/*" "*/";  -- block comment between /* and */
